diff --git a/fs/bio.c b/fs/bio.c
index b96fc6c..e7423fe 100644
--- a/fs/bio.c
+++ b/fs/bio.c
@@ -30,6 +30,7 @@
 #include <scsi/sg.h>		/* for struct sg_iovec */
 
 #include <trace/events/block.h>
+#include <trace/events/io-bench.h>
 
 /*
  * Test patch to inline a certain number of bi_io_vec's inside the bio
@@ -648,7 +649,11 @@ int bio_add_page(struct bio *bio, struct page *page, unsigned int len,
 		 unsigned int offset)
 {
 	struct request_queue *q = bdev_get_queue(bio->bi_bdev);
-	return __bio_add_page(q, bio, page, len, offset, queue_max_sectors(q));
+   int res;
+   TRACING_TAP(read, "bio_add_page start");
+	res = __bio_add_page(q, bio, page, len, offset, queue_max_sectors(q));
+   TRACING_TAP(read, "bio_add_page stop");
+   return res;
 }
 EXPORT_SYMBOL(bio_add_page);
 
diff --git a/fs/buffer.c b/fs/buffer.c
index 20c0aae..6e2d623 100644
--- a/fs/buffer.c
+++ b/fs/buffer.c
@@ -41,6 +41,7 @@
 #include <linux/bitops.h>
 #include <linux/mpage.h>
 #include <linux/bit_spinlock.h>
+#include <trace/events/io-bench.h>
 
 static int fsync_buffers_list(spinlock_t *lock, struct list_head *list);
 
@@ -2102,6 +2103,7 @@ int block_read_full_page(struct page *page, get_block_t *get_block)
 	unsigned int blocksize, bbits;
 	int nr, i;
 	int fully_mapped = 1;
+   TRACING_TAP(read, "block_read_full_page start");
 
 	head = create_page_buffers(page, inode, 0);
 	blocksize = head->b_size;
@@ -2154,6 +2156,7 @@ int block_read_full_page(struct page *page, get_block_t *get_block)
 		if (!PageError(page))
 			SetPageUptodate(page);
 		unlock_page(page);
+      TRACING_TAP(read, "block_read_full_page stop");
 		return 0;
 	}
 
@@ -2176,6 +2179,8 @@ int block_read_full_page(struct page *page, get_block_t *get_block)
 		else
 			submit_bh(READ, bh);
 	}
+
+   TRACING_TAP(read, "block_read_full_page stop");
 	return 0;
 }
 EXPORT_SYMBOL(block_read_full_page);
diff --git a/fs/mpage.c b/fs/mpage.c
index 0face1c..305f7cf 100644
--- a/fs/mpage.c
+++ b/fs/mpage.c
@@ -28,6 +28,7 @@
 #include <linux/backing-dev.h>
 #include <linux/pagevec.h>
 #include <linux/cleancache.h>
+#include <trace/events/io-bench.h>
 
 /*
  * I/O completion handler for multipage BIOs.
@@ -74,7 +75,9 @@ static void mpage_end_io(struct bio *bio, int err)
 static struct bio *mpage_bio_submit(int rw, struct bio *bio)
 {
 	bio->bi_end_io = mpage_end_io;
+   TRACING_TAP(read, "mpage_bio_submit start");
 	submit_bio(rw, bio);
+   TRACING_TAP(read, "mpage_bio_submit stop");
 	return NULL;
 }
 
@@ -171,6 +174,7 @@ do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,
 	int fully_mapped = 1;
 	unsigned nblocks;
 	unsigned relative_block;
+   TRACING_TAP(read, "do_mpage_readpage start");
 
 	if (page_has_buffers(page))
 		goto confused;
@@ -285,6 +289,7 @@ do_mpage_readpage(struct bio *bio, struct page *page, unsigned nr_pages,
 		bio = mpage_bio_submit(READ, bio);
 
 alloc_new:
+   TRACING_TAP(read, "do_mpage_readpage alloc_new");
 	if (bio == NULL) {
 		bio = mpage_alloc(bdev, blocks[0] << (blkbits - 9),
 			  	min_t(int, nr_pages, bio_get_nr_vecs(bdev)),
@@ -307,9 +312,11 @@ alloc_new:
 	else
 		*last_block_in_bio = blocks[blocks_per_page - 1];
 out:
+   TRACING_TAP(read, "do_mpage_readpage stop");
 	return bio;
 
 confused:
+   TRACING_TAP(read, "do_mpage_readpage confused");
 	if (bio)
 		bio = mpage_bio_submit(READ, bio);
 	if (!PageUptodate(page))
diff --git a/fs/read_write.c b/fs/read_write.c
index d065348..0f3f8c5 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -20,6 +20,8 @@
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 
+#include <trace/events/io-bench.h>
+
 const struct file_operations generic_ro_fops = {
 	.llseek		= generic_file_llseek,
 	.read		= do_sync_read,
@@ -333,6 +335,7 @@ ssize_t do_sync_read(struct file *filp, char __user *buf, size_t len, loff_t *pp
 	struct iovec iov = { .iov_base = buf, .iov_len = len };
 	struct kiocb kiocb;
 	ssize_t ret;
+   TRACING_TAP(read, "do_sync_read start");
 
 	init_sync_kiocb(&kiocb, filp);
 	kiocb.ki_pos = *ppos;
@@ -349,6 +352,7 @@ ssize_t do_sync_read(struct file *filp, char __user *buf, size_t len, loff_t *pp
 	if (-EIOCBQUEUED == ret)
 		ret = wait_on_sync_kiocb(&kiocb);
 	*ppos = kiocb.ki_pos;
+   TRACING_TAP(read, "do_sync_read stop");
 	return ret;
 }
 
@@ -365,6 +369,7 @@ ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 	if (unlikely(!access_ok(VERIFY_WRITE, buf, count)))
 		return -EFAULT;
 
+   TRACING_TAP(read, "vfs_read start");
 	ret = rw_verify_area(READ, file, pos, count);
 	if (ret >= 0) {
 		count = ret;
@@ -379,6 +384,7 @@ ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 		inc_syscr(current);
 	}
 
+   TRACING_TAP(read, "vfs_read stop");
 	return ret;
 }
 
diff --git a/mm/filemap.c b/mm/filemap.c
index 83efee7..10dc563 100644
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@ -42,6 +42,8 @@
 
 #include <asm/mman.h>
 
+#include <trace/events/io-bench.h>
+
 /*
  * Shared mappings implemented 30.11.1994. It's not fully working yet,
  * though.
@@ -1090,6 +1092,7 @@ static void do_generic_file_read(struct file *filp, loff_t *ppos,
 	unsigned long offset;      /* offset into pagecache page */
 	unsigned int prev_offset;
 	int error;
+   TRACING_TAP(read, "do_generic_file_read start");
 
 	index = *ppos >> PAGE_CACHE_SHIFT;
 	prev_index = ra->prev_pos >> PAGE_CACHE_SHIFT;
@@ -1102,9 +1105,11 @@ static void do_generic_file_read(struct file *filp, loff_t *ppos,
 		pgoff_t end_index;
 		loff_t isize;
 		unsigned long nr, ret;
+      TRACING_TAP(read, "do_generic_file_read page_loop");
 
 		cond_resched();
 find_page:
+      TRACING_TAP(read, "do_generic_file_read find_page");
 		page = find_get_page(mapping, index);
 		if (!page) {
 			page_cache_sync_readahead(mapping,
@@ -1134,6 +1139,7 @@ find_page:
 			unlock_page(page);
 		}
 page_ok:
+      TRACING_TAP(read, "do_generic_file_read page_ok");
 		/*
 		 * i_size must be checked after we know the page is Uptodate.
 		 *
@@ -1198,12 +1204,14 @@ page_ok:
 		goto out;
 
 page_not_up_to_date:
+      TRACING_TAP(read, "do_generic_file_read page_not_up_to_date");
 		/* Get exclusive access to the page ... */
 		error = lock_page_killable(page);
 		if (unlikely(error))
 			goto readpage_error;
 
 page_not_up_to_date_locked:
+      TRACING_TAP(read, "do_generic_file_read page_not_up_to_date_locked");
 		/* Did it get truncated before we got the lock? */
 		if (!page->mapping) {
 			unlock_page(page);
@@ -1218,6 +1226,7 @@ page_not_up_to_date_locked:
 		}
 
 readpage:
+      TRACING_TAP(read, "do_generic_file_read readpage");
 		/*
 		 * A previous I/O error may have been due to temporary
 		 * failures, eg. multipath errors.
@@ -1259,12 +1268,14 @@ readpage:
 		goto page_ok;
 
 readpage_error:
+      TRACING_TAP(read, "do_generic_file_read readpage_error");
 		/* UHHUH! A synchronous read error occurred. Report it */
 		desc->error = error;
 		page_cache_release(page);
 		goto out;
 
 no_cached_page:
+      TRACING_TAP(read, "do_generic_file_read no_cached_page");
 		/*
 		 * Ok, it wasn't cached, so we need to create a new
 		 * page..
@@ -1287,6 +1298,7 @@ no_cached_page:
 	}
 
 out:
+   TRACING_TAP(read, "do_generic_file_read stop");
 	ra->prev_pos = prev_index;
 	ra->prev_pos <<= PAGE_CACHE_SHIFT;
 	ra->prev_pos |= prev_offset;
@@ -1300,6 +1312,7 @@ int file_read_actor(read_descriptor_t *desc, struct page *page,
 {
 	char *kaddr;
 	unsigned long left, count = desc->count;
+   TRACING_TAP(read, "file_read_actor start");
 
 	if (size > count)
 		size = count;
@@ -1309,6 +1322,7 @@ int file_read_actor(read_descriptor_t *desc, struct page *page,
 	 * taking the kmap.
 	 */
 	if (!fault_in_pages_writeable(desc->arg.buf, size)) {
+      TRACING_TAP(read, "file_read_actor kmap_atomic");
 		kaddr = kmap_atomic(page);
 		left = __copy_to_user_inatomic(desc->arg.buf,
 						kaddr + offset, size);
@@ -1317,6 +1331,7 @@ int file_read_actor(read_descriptor_t *desc, struct page *page,
 			goto success;
 	}
 
+   TRACING_TAP(read, "file_read_actor kmap");
 	/* Do it the slow way */
 	kaddr = kmap(page);
 	left = __copy_to_user(desc->arg.buf, kaddr + offset, size);
@@ -1327,6 +1342,7 @@ int file_read_actor(read_descriptor_t *desc, struct page *page,
 		desc->error = -EFAULT;
 	}
 success:
+   TRACING_TAP(read, "file_read_actor stop");
 	desc->count = count - size;
 	desc->written += size;
 	desc->arg.buf += size;
@@ -1392,10 +1408,14 @@ generic_file_aio_read(struct kiocb *iocb, const struct iovec *iov,
 	size_t count;
 	loff_t *ppos = &iocb->ki_pos;
 
+   TRACING_TAP(read, "generic_file_aio_read start");
+
 	count = 0;
 	retval = generic_segment_checks(iov, &nr_segs, &count, VERIFY_WRITE);
-	if (retval)
+	if (retval) {
+      TRACING_TAP(read, "generic_file_aio_read start");
 		return retval;
+   }
 
 	/* coalesce the iovecs and go direct-to-BIO for O_DIRECT */
 	if (filp->f_flags & O_DIRECT) {
@@ -1412,6 +1432,7 @@ generic_file_aio_read(struct kiocb *iocb, const struct iovec *iov,
 			retval = filemap_write_and_wait_range(mapping, pos,
 					pos + iov_length(iov, nr_segs) - 1);
 			if (!retval) {
+            TRACING_TAP(read, "generic_file_aio_read direct");
 				retval = mapping->a_ops->direct_IO(READ, iocb,
 							iov, pos, nr_segs);
 			}
@@ -1436,6 +1457,7 @@ generic_file_aio_read(struct kiocb *iocb, const struct iovec *iov,
 	}
 
 	count = retval;
+   TRACING_TAP(read, "generic_file_aio_read regular");
 	for (seg = 0; seg < nr_segs; seg++) {
 		read_descriptor_t desc;
 		loff_t offset = 0;
@@ -1469,6 +1491,7 @@ generic_file_aio_read(struct kiocb *iocb, const struct iovec *iov,
 			break;
 	}
 out:
+   TRACING_TAP(read, "generic_file_aio_read stop");
 	return retval;
 }
 EXPORT_SYMBOL(generic_file_aio_read);
diff --git a/mm/readahead.c b/mm/readahead.c
index 7963f23..41f2fa2 100644
--- a/mm/readahead.c
+++ b/mm/readahead.c
@@ -19,6 +19,7 @@
 #include <linux/pagemap.h>
 #include <linux/syscalls.h>
 #include <linux/file.h>
+#include <trace/events/io-bench.h>
 
 /*
  * Initialise a struct file's readahead state.  Assumes that the caller has
@@ -114,6 +115,7 @@ static int read_pages(struct address_space *mapping, struct file *filp,
 	struct blk_plug plug;
 	unsigned page_idx;
 	int ret;
+   TRACING_TAP(read, "read_pages start");
 
 	blk_start_plug(&plug);
 
@@ -136,6 +138,7 @@ static int read_pages(struct address_space *mapping, struct file *filp,
 	ret = 0;
 
 out:
+   TRACING_TAP(read, "read_pages stop");
 	blk_finish_plug(&plug);
 
 	return ret;
